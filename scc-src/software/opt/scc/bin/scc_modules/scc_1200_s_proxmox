#!/bin/sh

# Shell script for plugins for SCC.
# Copyright (C) 2001-2004 Open Challenge B.V.
# Copyright (C) 2004-2005 OpenEyeT Professional Services.
# Copyright (C) 2005-2018 QNH.
# Copyright (C) 2019 Siem Korteweg.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.
# If not, write to the Free Software Foundation,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# Contact information: https://sourceforge.net/projects/sysconfcollect/support

# SCC-release: 1.31.0
# ID:          $Id: scc_1200_s_proxmox 7512 2021-01-24 20:47:50Z hendrikvisage $


set -u
[ "${SCC_DEBUG:-}" ] && set -x

ProgName=${0##*/};			export ProgName

if [ -z "${SCC_BIN:-}" -o -z "${SCC_CONF:-}" -o -z "${SCC_DATA:-}" ]
then
	echo "${ProgName}: activate this program via scc(1), scc-log(1) or scc-collect(1)" >&2
	exit 2
fi

if [ ! -w ${SCC_DATA} ]
then
	echo "${ProgName}: insufficient permissions to write in data directory: ${SCC_DATA}" >&2
	exit 2
fi

. ${SCC_BIN}/scc_modules/scc_utils

# Start the code for the plugin.

# Notice:
# - all output lines should start with "fix:", "var:" or "hlp:".
# - refer to scc_utils for the functions that are provided.

# When called by scc-collect, the following file(names) are available:
#	${PROC_FILE}		all processes at the moment scc-collect started
#	${TMP1_FILE}		empty, temporary file
#	${TMP2_FILE}		empty, temporary file
#	${TMP3_FILE}		empty, temporary file
#	${SCC_KEEP_CONFIG}	file with data from previous run
#	${SCC_KEEP_NEW}		file with data to keep for next run
#	${SYSCTL_DATA}		file containing all sysctl data
#	Some scc-data is determined by means of path-names of running
#	processes. To avoid changes in the logbook when the these processes
#	are inactive, we store this process data in the keep-file. When the
#	processes are inactive, we use the data from the keep-file. After using
#	it, we have to add this data to ${SCC_KEEP_NEW} for the next run of scc.

# When called by scc-collect, the following environment variables are available:
#	SCC_MODULE		name of the current module
#	OS_NAME			name of the OS: HP-UX SunOS, Linux, AIX
#	HOSTNAME		hostname (without domain)
#	IS_NIS_MASTER		0/1 indicator for a NIS master-server
#	NIS_DATA_DIR		source directory for NIS-maps
#	HPUX_KERNEL		path of the HP-UX kernel
#	MAX_SYS_ACCOUNT_ID	max uid for system-users
#	SCC_RELEASE		release identification
#	SCC_INSTALL_PHASE	"empty", "preinstall", "postinstall" or "preremove"
#	SCC_INSTALL_METHOD	"source" or empty
#	SCC_PROFILING		non-empty indicates recording of profiling data in snapshot
#	SCC_LINUX_DISTRO	name of Linux distro, or empty
#	crypt_key		key string for generating checksums

# To collect extra files from home directories, use a number larger than 1000 for a new
# module to run after the default user module and get the preserved local home directory 
# paths via the following command:
#
#       grep :user:local_home_directory::user: ${SCC_KEEP_NEW}
#
# The resulting data has the following format:
#
#       <prefix>:user:local_home_directory::user:<user_name>:dir:<directory>
#
# Where <prefix> is "var" or "fix" for (non)privileged users

# Refer to https://github.com/BillDietrich/SCC-Additions-for-Desktop-Linux
# for examples of user modules.

#Testing for ProxMox:
if [ -e /usr/bin/pveversion ] ; then
pvesubscription get | sed -e 's/^/fix:system:proxmox:subscription::/'

/usr/bin/pveversion --verbose | sed -e 's/^/fix:system:proxmox:pveversion::/'

qm list | sed -e 's/^/fix:system:proxmox:qemu:VMs::/'
pct list | sed -e 's/^/fix:system:proxmox:lxc:Containers::/'
pvesm status | sed -e 's/^/fix:system:proxmox:StorageManager:configured::/'

#Config files 
for i in .debug .le .members .version datacenter.log vzdump.cron user.cfg corosync.conf
do
 scc_check_file /etc/pve/$i fix:system:proxmox:cluster-wide:configs:/etc/pve/$i::
done
# scc_check_file /etc/pve/.members fix:system:proxmox:cluster-wide:config:/etc/pve/.members::

for i in   .clusterlog
do
 scc_check_file /etc/pve/$i var:system:proxmox:cluster-wide:logs:/etc/pve/$i::
done

scc_check_file /etc/pve/local/lrm_status var:system:proxmox:node:status:/etc/pve/$i::
scc_check_file /etc/pve/local/config fix:system:proxmox:node:configs:/etc/pve/$i::

pvesm apiinfo | sed -e 's/^/fix:system:proxmox:StorageManager:apiinfo::/'

VMLIST=`qm list | awk '$1 ~ /^[0-9]/ {print $1}'`
LXCLIST=`pct list | awk '$1 ~ /^[0-9]/ {print $1}'`
SMLIST=`pvesm status | awk '$2 != "Type" { print $1}'`

for i in $VMLIST 
do
 VMID=`printf "%06d" $i`
 VNAME=`qm status $i --verbose 1 | awk '/^name:/ {print $2}'`
 VV=$VMID
 qm pending $i | awk '/^cur/ {sub($1 FS,""); print "fix:system:proxmox:qemu:'$VV':config::" $0}
                      /^pend/ {sub($1 FS,""); print "var:system:proxmox:qemu:'$VV':config::" $0}'
 SNAP=`qm config $i| awk '/^parent:/ {print $2}'`
 while [ "x$SNAP" != "x" ]
 do
   qm config $i --snapshot $SNAP | sed -e 's/^/fix:system:proxmox:qemu:'$VV':snapshot-config:'$SNAP'::/'
   SNAP=`qm config $i --snapshot $SNAP | awk '/^parent:/ {print $2}'`
 done
done


for i in $LXCLIST 
do
 VMID=`printf "%06d" $i`
 VNAME=`pct status $i --verbose 1 | awk '/^name:/ {print $2}'`
 VV=$VMID
 pct pending $i | awk '/^cur/ {sub($1 FS,""); print "fix:system:proxmox:lxc:'$VV':config::" $0}
                      /^pend/ {sub($1 FS,""); print "var:system:proxmox:lxc:'$VV':config::" $0}'
 SNAP=`pct config $i| awk '/^parent:/ {print $2}'`
 while [ "x$SNAP" != "x" ]
 do
   pct config $i --snapshot $SNAP | sed -e 's/^/fix:system:proxmox:lxc:'$VV':snapshot-config:'$SNAP'::/'
   SNAP=`pct config $i --snapshot $SNAP | awk '/^parent:/ {print $2}'`
 done
done

for i in $SMLIST
do
 pvesm list $i | grep -v 'VMID'| sed -e 's/^/fix:system:proxmox:StoreManager:'$i':listvolumes::/'
done

if [ -e /etc/pve/corosync.conf ]
then
 pvecm apiver | sed -e 's/^/fix:system:proxmox:cluster:api::/'
 scc_check_file /etc/pve/corosync.conf fix:system:proxmox:cluster:/etc/pve/corosync.conf::
 pvecm nodes | sed -e 's/^/fix:system:proxmox:cluster:nodes::/'
 pvecm status | sed -e 's/^/fix:system:proxmox:cluster:status::/'
else
 echo 'fix:system:proxmox:cluster::Not configured'
fi

pvesr list | sed -e 's/^/fix:system:proxmox:Replication Jobs:list::/'
pvesr status | sed -e 's/^/var:system:proxmox:Replication Jobs:status::/'

#Time for access control stuff
#The output here is in YAML format, best given the line lengths in some cases
# as JSON isn't so nice looking with out a JSON interpreter in the scc_srv or the 
# local, especially w.r.t. differences

#only user lsit have --full, the rest throws error
pveum user list --full --output-format yaml | sed -e 's/^/fix:system:proxmox:user manager:users::/'

for i in realm group role acl
do
 pveum $i list --output-format yaml | sed -e 's/^/fix:system:proxmox:user manager:'$i'::/'
done

pvenode task list --noborder | sed -e 's/^/var:system:proxmox:node:tasklist::/'
fi #
exit 0
