#!/bin/sh

# Shell script to install source version of scc
# Copyright (C) 2001-2004 Open Challenge B.V.
# Copyright (C) 2004-2005 OpenEyeT Professional Services.
# Copyright (C) 2005-2018 QNH.
# Copyright (C) 2019 Siem Korteweg.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.
# If not, write to the Free Software Foundation,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
#
# Contact information: https://sourceforge.net/projects/sysconfcollect/support

# SCC-release: 1.26.73
# ID:          $Id: scc-install 6287 2019-11-12 18:45:53Z siemkorteweg $
 
# To install the software, untar and call:
#    cd scc-1.26.73
#    ./scc-install

# This script is called in a directory with the following sub-directories:
#	src/install
#	src/software/opt/scc		bin, doc and man
#	src/software/etc/opt/scc	conf and newconfig
#	src/software/var/opt/scc	data

release="1.26.73"
umask 077

TESTING="testing"
x="$(echo "${TESTING}" 2>/dev/null)"
if [ "${x}" != "${TESTING}" ]
then
	# The /bin/sh on this system does not support the features we are using in scc.
	# Change to /bin/ksh. Abort the installation when this shell is absent.
	if [ ! -x /bin/ksh ]
	then
		echo "${0}: cannot install scc from src, no ksh or POSIX-shell found" >&2
		exit 1
	fi

	# Change the shell in all scripts.
	{
		find install -type f
		find software -type f
	}					|
	while read file
	do
		# Use ed to preserve the permissions.
		cat <<-_X_	| ed -s ${file} 2>/dev/null | sed -e '/^?$/d'
			1,$ s@^#!/bin/sh@#!/bin/ksh@
			1,$ s@SHELL=/bin/sh@SHELL=/bin/ksh@
			w
			q
		_X_
	done

	# Finally we have to re-run this script with ksh,
	# as the remainder of this script also uses subshells via $().
	exec /bin/ksh ${0} "$@"
fi

mkdir -p /var/opt/scc/data 2>/dev/null
if [ ! -w /var/opt/scc ]
then
	echo "${0##*/}: unable to create directories, run this program as root" >&2
	exit 2
fi

if [ "$(uname -s)" != "OSF1" ]
then
	id_exe="$(which id 2>/dev/null)"
	if [ -x "${id_exe}" ]
	then
		owner_group="$(id -un):$(id -gn)"
	else
		owner_group="root:root"
	fi
else
	owner_group="root:system"
fi

SCC_INSTALL_METHOD="source";		export SCC_INSTALL_METHOD
./install/preinstall

# Move the files to their places (no install files in /var/opt/scc):
for file in software/opt/scc/*/* software/opt/scc/*/*/* software/etc/opt/scc/newconfig/* 
do
	if [ ! -f ${file} ]
	then
		continue
	fi

	# Determine destination path: erase leading string "software"
	f_name=${file#software}
	# Determine destination directory, faster than $(dirname ${f_name})
	d_name=${f_name%/*}		# 

	if [ ! -d ${d_name} ]
	then
		mkdir -p ${d_name} 2>/dev/null
		chown ${owner_group} ${d_name}
	fi

	rm -f ${d_name}/${file##*/}
	cp -p ${file} ${d_name}
	chown ${owner_group} ${d_name}/${file##*/}
done

# The tar-ball contains some empty directories that are required by scc.
for dir in software/etc/opt/scc/* software/var/opt/scc/* software/var/opt/scc/*/*
do
	if [ ! -d ${dir} ]
	then
		continue
	fi

	# Determine destination path: erase leading string "software"
	d_name=${file#software}

	if [ ! -d ${d_name} ]
	then
		mkdir -p ${d_name} 2>/dev/null
		chown ${owner_group} ${d_name}
	fi
done

./install/postinstall

exit 0
